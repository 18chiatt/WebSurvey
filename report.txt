	I was surprised at how easy the transition from console to web was.  When I first started on the project, I thought I was going to have to effectively re-write the entire survey specifically for the web  in backend.rkt.  After looking through the discord, I figure out that all I had to do was modify a few of my functions to pass around strings instead of my custom datatypes in  survey.rkt, and define helper functions in backend.rkt.  The transition of these functions was quite simple once I figured out how I was trying to do it. 
	If I had been asked to accomplish this task prior to taking this class, I certainly would have spun up a web framework like Vue and turned the whole thing into a single page experience.  While this approach certainly would have gotten the job done, it is quite bloated and it is not as easy to implement state using just raw HTTP requests.  This approach opened my eyes to the possibility of state based web programming.  
	My first attempt to migrate the survey to the web was an absolute disaster.  I was trying to do the entire survey in racket but also using my types from the plait implementation. Because there are no user-defined types (that I could find) in racket/base, I was trying to find a way to represent the ‘next’ question to be asked.  The solution I drafted was to have a global list for each field so I could access each question by accessing each field in the global data structures.  Then, I could create functions on a question by passing the fetcher function a callback which the fetcher function would call with  each of the fields.  This approach seemed absolutely horrible and would not really by ‘migration’ so much as ‘re-write,’ so I’m glad I figured out a better way to accomplish this task.  
	This new approach opens up new opportunities for me to create sequences of information in a way which previously would have been much more difficult.  If I was using mutation, getting the back button, refreshes, and new tabs to handle correctly would be exceptionally difficult. With this state based programming, it comes almost completely for free, which is very convenient. If I was trying to get this session based functionality with HTTP, I would need to mess around with cookies, massive amounts of java script, and a very complicated back end.  I was very impressed with the ability of racket,plait,and web-server/insta to communicate with each other. I haven’t had many good experiences with one language calling the code of other languages, so I was very glad that just worked right out of the box.
	Moving forward, I will consider using this kind of server-client interaction in personal projects because it very easily allows for session management and dynamic series.  Additionally, the ability to easily serve custom HTML using ‘xexpr’ was very impressive.  Overall, the migration was significantly simpler than I had been expecting. I was able to re-use my existing code and preserve all of the functionality with only a few dozen lines of back end code.
